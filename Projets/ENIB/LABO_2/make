#!/bin/bash
#####################################################################################
##
##    SETTINGS
##
#####################################################################################
#################################################
## Colors
#################################################

default="\033[0m"
black="\033[30m"
red="\033[31m"
green="\033[32m"
orange="\033[33m"
blue="\033[34m"

#################################################
## Folders
#################################################

output_dir="Output" 					#Contains all file generated by compiling project
img_dir="Images" 						#Contains all images of project
utils_dir="Utils" 						#Contains Utils library
part_dir="Parts" 						#Contains content file

#################################################
## Files
#################################################

setting_file="Settings.tex" 					#Settings file
main_file="main.tex" 							#main file

#################################################
## Function
#################################################

function createDirectory {
	directory="$1"
	if [ -z "$directory" ]; then
		echo -e "$red"
 		echo -e "Please, give a folder name in argument of createDirectory function !"
		echo -e "$default"
	else
		if [ ! -d "$directory" ];then
			mkdir $directory
		fi
	fi
	
}
#End createDirectory

function loadValue {
	default_value="$1"
	load_value="$2"
	if [ -z "$load_value" ]; then
		echo $default_value
	else
		echo $load_value
	fi
	
}
#End createDirectory

#####################################################################################
##
##    INIT PROJECT with --init argument in command line
##
#####################################################################################

############################# IF $1 = "--init" ######################################
if [ "$1" == "--init" ];then

	#################################################
	## Give project name
	#################################################
	echo -n "Nom du projet (sans espace): "
	read project_name
	echo -e $project_name
	#################################################
	## Create all folders
	#################################################
	createDirectory $project_name
	createDirectory $project_name/$img_dir
	createDirectory $project_name/$utils_dir
	createDirectory $project_name/$utils_dir
	createDirectory $project_name/$part_dir
	
	if [ -d "$utils_dir" ];then
		echo -e $green
		echo -e ">>> La bilbiothèque $utils_dir est présente à la racine de compilation temporaire (`pwd`)."
		echo -e ">>> Déplacement de la bibliothèque dans le répertoire de projet..."
		cp $utils_dir/* $project_name/$utils_dir
		echo -e ">>> Copie de la bibliothèque dans le répertoire de projet : [ OK ]"

	else
		echo -e $orange
		echo -e ">>> La bilbiothèque $utils_dir est absente à la racine de compilation temporaire (`pwd`)."
		echo -e ">>> Une fois la création du projet terminée, veuillez placer la bibliothèque $utils_dir à la racine du répertoire du projet (`pwd`/$project_name)."
		sleep 4
	fi

	#################################################
	## Geneating Settings.tex file
	#################################################
	echo -e $default
	echo -e ">> Veuillez choisir le type de document."
	echo -e " report - article - beamer - book - exam [report par défaut]"
	echo -n ">> Votre choix : "
	read document_type
	document_type=`loadValue report $document_type`


	echo -e ""
	echo -n ">> Veuillez choisir la taille de police (12 par défaut) : "
	read font_size	
	font_size=`loadValue 12 $font_size`

	echo -e ""
	echo -n ">> Veuillez choisir la langue : "
	echo -e " frenchb - english [frenchb par défaut]"
	read langage	
	langage=`loadValue frenchb $langage`

	echo -e ""
	echo -n ">> Veuillez choisir la marge horizontale du document (en cm) [3 par défaut] : "
	read horiz_margin	
	horiz_margin=`loadValue 3 $horiz_margin`

	echo -e ""
	echo -n ">> Veuillez choisir la marge vertical du document (en cm) [3 par défaut] : "
	read vert_margin	
	vert_margin=`loadValue 3 $vert_margin`

	echo -e ""
	echo -n ">> Veuillez choisir le titre des chapitres ['Section' par défaut] : "
	read chapter_name	
	chapter_name=`loadValue Section $chapter_name`

	echo -e ""
	echo -n ">> Veuillez choisir l'épaisseur de la ligne d'en-tête [0.2 par défaut] : "
	read width_header	
	width_header=`loadValue 0.2 $width_header`

	echo -e ""
	echo -n ">> Veuillez choisir l'épaisseur de la ligne du pied de page [0.2 par défaut] : "
	read width_footer	
	width_footer=`loadValue 0.2 $width_footer`

	echo -e ""
	echo -e ">> Veuillez choisir la profondeur de la table des matières [1 par défaut] : "
	echo -e " 1 : chapter, section, subsection "
	echo -e " 2 : chapter, section, subsection, subsubsection"
	read toc_depth	
	toc_depth=`loadValue 1 $toc_depth`

	echo -e ""
	echo -e ">> Veuillez choisir l'espace de nom du projet ('init' par défaut): "
	read pdf_namespace	
	pdf_namespace=`loadValue init $pdf_namespace`

	echo -e ""
	echo -e ">> Veuillez choisir le titre du fichier PDF ('' par défaut): "
	read pdf_title	

	echo -e ""
	echo -e ">> Veuillez choisir le(s) auteur(s) [séparés par une virgule] du fichier PDF ('' par défaut): "
	read pdf_author	

	echo -e ""
	echo -e ">> Veuillez choisir le sujet du document ('' par défaut): "
	read pdf_subject	

	echo -e ""
	echo -e ">> Veuillez choisir le créateur du document PDF ('' par défaut): "
	read pdf_creator

	echo -e ""
	echo -e ">> Veuillez choisir le producteur du document PDF ('' par défaut): "
	read pdf_productor

	echo -e ""
	echo -e ">> Veuillez choisir les mots-clés du document PDF ('' par défaut): "
	read pdf_productor

	echo -e ""
	echo -e ">> Veuillez choisir la couleur des liens du document PDF ('blue' par défaut): "
	read pdf_link_color	
	pdf_link_color=`loadValue blue $pdf_link_color`

	echo -e ""
	echo -e ">> Veuillez choisir la couleur des citations dans la bibliographie du document PDF ('blue' par défaut): "
	read pdf_cite_color	
	pdf_cite_color=`loadValue blue $pdf_cite_color`

	echo -e ""
	echo -e ">> Veuillez choisir la couleur des liens de fichier du document PDF ('green' par défaut): "
	read pdf_file_color	
	pdf_file_color=`loadValue green $pdf_file_color`


	#Print content
	echo -e "%#######################################################" 	>> $project_name/$setting_file
	echo -e "%### Settings file" 										>> $project_name/$setting_file
	echo -e "%### Project : $project_name" 								>> $project_name/$setting_file
	echo -e "%#######################################################" 	>> $project_name/$setting_file
	echo -e "\documentclass["$font_size"pt]{$document_type}" 			>> $project_name/$setting_file
	echo -e "\usepackage[$langage]{babel} %Select langage" 				>> $project_name/$setting_file
	echo -e "\usepackage{Utils/Utils} %Load $utils_dir library" 		>> $project_name/$setting_file

	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "%Geometry" 														>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "\geometry{hmargin="$horiz_margin"cm,vmargin="$vert_margin"cm}" 	>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file

	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "%Rename chapter name"												>> $project_name/$setting_file														>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "\setAliasChapter{$chapter_name}" 									>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file

	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "%If you want to add presentation, modify the next bloc"			>> $project_name/$setting_file		
	echo -e "%The firt line is about the header :"								>> $project_name/$setting_file
	echo -e "%{left content}{center content}{right content}"					>> $project_name/$setting_file
	echo -e "%The second line is about the footer :"							>> $project_name/$setting_file	
	echo -e "%{left content}{center content}{right content}"					>> $project_name/$setting_file	
	echo -e "%####"																>> $project_name/$setting_file	
	echo -n "%to get the current chapter name, use \currentChapter command as content" >> $project_name/$setting_file	
	echo -e "" >> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -n "\addPresentation
{} {} {\currentChapter}
{} {} {\currentPage}" 									>> $project_name/$setting_file
	echo -e "" >> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file

	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "%Change the width of footer line and header line"					>> $project_name/$setting_file
	echo -e "%To delete it, set value to 0"										>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "\setHeaderLine{$width_header}" 									>> $project_name/$setting_file
	echo -e "\setFooterLine{$width_footer}" 									>> $project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file

	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "%URL and data settings"											>> $project_name/$setting_file		
	echo -e "%#############################################################" 	>> $project_name/$setting_file
	echo -e "\setParameters{$pdf_title}{$pdf_author}{$pdf_subject}{$pdf_creator}{$pdf_productor}{$pdf_link_color}{$pdf_cite_color}{$pdf_file_color}"	>>$project_name/$setting_file
	echo -e "%#############################################################" 	>> $project_name/$setting_file	

	#################################################
	## Creating namespace folder
	#################################################
	createDirectory $project_name/$part_dir/0.$pdf_namespace
	createDirectory $project_name/$img_dir/$pdf_namespace

	#################################################
	## Geneating main.tex file
	#################################################

	echo -e "%#############################################################" 	>> $project_name/$main_file
	echo -e "%MAIN file for $project_name project"								>> $project_name/$main_file		
	echo -e "%#############################################################" 	>> $project_name/$main_file
	echo -n "\input{Settings.tex}" 												>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\begin{document}" 													>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\setHeader{$project_name}{$pdf_author}{\theDate}" 					>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\tableofcontents" 													>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\setcounter{page}{2}" 												>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\input{Output/add_content.tex}" 									>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -n "\end{document}" 													>> $project_name/$main_file
	echo -e "" 																	>> $project_name/$main_file
	echo -e "%#############################################################" 	>> $project_name/$main_file	

	#################################################
	## Copy of make file
	#################################################
	cp make $project_name/
	chmod 777 $project_name/make
	echo -e "$green >>> End of generating project $default" 	
	exit
fi
############################# END IF ###############################################

#####################################################################################
##
##    CHECK PROJECT with --check argument in command line
##
#####################################################################################

############################# IF $1 = "--check" ######################################
if [ "$1" == "--check" ];then

	echo -e "Vérification orthographique du répertoire $part_dir..."
	for item in $part_dir/*
	do

    if [ -d $item ]
    then
		echo -e ">>> Dossier $item en cours d'analyse !"

    	for item_s in $item/*
    	do
        	echo -e "Voulez-vous analyser le fichier $item_s ? (y/n)"
        	read reponse

        	if [ "$reponse" = "y" ];
        	then
            	aspell --encoding=utf-8 --lang=fr_FR.UFT-8 -c "$item_s" 
        	fi
    	done
    fi
	done
	echo -e ">>> Vérification orthographique terminée !"
	exit
fi


#####################################################################################
##
##    GIT project
##
#####################################################################################

############################# IF $1 = "--init" ######################################
if [ "$1" == "--git" ];then

	#################################################
	## Checking arguments
	#################################################
	if [ "$2" == "" ];then
	
		echo -e "$red >>> Request has been abandoned because message is empty$default"
		exit
	fi

	#################################################
	## Saving git
	#################################################	
	git add .
	git commit -m "$2"
	git push origin master
	echo -e "Mise à jour du dépot terminée !"
	exit
fi
############################# END IF ###############################################

#####################################################################################
##
##    MAKE project
##
#####################################################################################

#################################################
## Checking dir
#################################################	
createDirectory $img_dir
createDirectory $utils_dir
createDirectory $utils_dir
createDirectory $part_dir
createDirectory $output_dir

main="main" #main file
parts_dir="Parts"

#################################################
## Compilation
#################################################	
echo -e ">>> Compilation du répertoire `pwd`"
echo -e "$green"
echo -e "[Etape 1 / 9] >>> Nettoyage du répertoire $output_dir..."
echo -e "$orange"
rm -R $output_dir/*
echo -e "$green"
echo -e "[Etape 1 / 9] >>> Nettoyage du répertoire $output_dir effectué"
echo -e "[Etape 2 / 9] >>> Nettoyage du fichier des journaux Latex..."
echo "" > render_report.txt
echo -e "[Etape 2 / 9] >>> Nettoyage du fichier des journaux Latex effectué"

echo -e "[Etape 3 / 9] >>> Génération du fichier d'importation (import_content.tex) et importation des bilbiothèques..."
echo -e "$default"
standlone="standlone.tex"
echo "" > $standlone


echo -e "%#############################################################" 	>> $standlone
echo -e "%MAIN file for $project_name project"								>> $standlone		
echo -e "%#############################################################" 	>> $standlone
echo -e "\documentclass[12pt]{report}" 			>> $standlone
#################################################
## Utils writing
#################################################	
echo -e "%############################################################
%###### Package Utils 
%###### This package include Latex tools
%###### Author  : Nicolas LE GUERROUE
%###### Contact : nicolasleguerroue@gmail.com
%############################################################
%######
%###### Include packages
%######
%############################################################" > $utils_dir/Utils.sty
tmp_content=""
for item in $utils_dir/*
do
	#echo $output_dir/$item
	if [ -f "$item" ];then
		if [ `echo $item | grep Utils/Utils.sty` ];then
			echo -e "$green"
			echo -e ">>> Fichier d'inclusion des bibliothèques trouvée!"
			echo -e "$blue"
		else
			echo -e "$blue>>> Bibliothèques "$item" importée !"
			lib_name=`echo $item | cut -d '.' -f1`
			tmp_content="$tmp_content""$(cat $item)"
			echo -n "\usepackage{$lib_name}" >> $utils_dir/Utils.sty
			echo -e "" >> $utils_dir/Utils.sty
		fi
	fi
done
echo -e "$default"
echo "$tmp_content" >> $standlone

#################################################
## Full render [begin]
#################################################	

echo -n "$(cat Settings.tex)" 												>> $standlone
echo -e "" 																	>> $standlone
echo -n "\begin{document}" 												>> $standlone
echo -e "" 																	>> $standlone
echo -n "\setHeader{A}{A}{A}" 												>> $standlone
echo -e "" 																	>> $standlone
echo -n "\tableofcontents" 												>> $standlone
echo -e "" 																	>> $standlone
echo -n "\setcounter{page}{2}" 												>> $standlone
echo -e "" 																	>> $standlone

#################################################
## Warnings 
#################################################	
echo -n "\newcommand{\raiseWarning}[1]{\PackageWarning{Utils}{#1}}" >> $output_dir/add_content.tex
echo -e "" >> $output_dir/add_content.tex
echo -n "\newcommand{\raiseError}[1]{\PackageError{Utils}{#1}}" >> $output_dir/add_content.tex
echo -e "" >> $output_dir/add_content.tex
#################################################
## Images
#################################################	
echo -n "\newcommand{\rootImages}{Images/empty}" >> $output_dir/add_content.tex
echo -e "" >> $output_dir/add_content.tex

for item in $parts_dir/*
do	

if [ -d $item ]
then
	echo -e "$blue >>> Dossier $item ajouté ! $default"
	img_name=`echo $item | cut -d '.' -f2`
	#echo ">>>$img_name"
	if [ ! -d "$img_dir/$img_name" ]
	then
		echo -e "$red Le dossier $img_name n'existe pas dans le répertoire $img_dir. \nTous les fichiers avec des images dépendantes de ce dossier ($img_dir/$img_name) ne seront pas importées !$orange\n Dossier(s) dans le répertoire $img_dir: \n" 
		ls $img_dir
		echo -e $default
		exit
	fi
	echo -n "\renewcommand{\rootImages}{Images/$img_name}" >> $output_dir/add_content.tex
	echo -e "" >> $output_dir/add_content.tex
	tmp_content=""
	for item_s in $item/*
	do
		tmp_content="$tmp_content$(cat $item_s)"
		if [ "`echo $item_s | grep part`" != "" ]
		then
			name_part=`echo $item_s | cut -d '.' -f4`
			echo "\part{"$name_part"}" >> $output_dir/add_content.tex
		fi
		echo -e "$blue >>> Fichier $item_s ajouté ! $default"
		echo "\input{"$item_s"}" >> $output_dir/add_content.tex
	done
	echo "$tmp_content" >> $standlone
fi
done

echo -e "" 																	>> $standlone
echo -n "\end{document}" 									>> $standlone
echo -e "" 																	>> $standlone
echo -e "%#############################################################" 	>> $standlone	


echo -e "$green"
echo -e "[Etape 3 / 9] >>> Génération du fichier d'importation des parties effectuée"

echo -e "[Etape 5 / 9] >>> Première compilation du fichier $main.tex..."
echo -e "$orange"
pdflatex --output-dir=$output_dir $main.tex >> render_report.txt
echo -e "$green"
echo -e "[Etape 5 / 9] >>> Première compilation du fichier $main.tex effectuée"
echo -e "[Etape 6 / 9] >>> Compilation du glossaire..."
echo -e "$orange"
makeglossaries $output_dir/$main >> render_report.txt
echo -e "$green"
echo -e "[Etape 6 / 9] >>> Compilation du glossaire effectuée"
echo -e "[Etape 7 / 9] >>> Compilation de la nomenclature...."
echo -e "$orange"
makeindex $output_dir/$main >> render_report.txt
makeindex $output_dir/$main.nlo -s nomencl.ist -o $output_dir/$main.nls >> render_report.txt
echo -e "$green"
echo -e "[Etape 7 / 9] >>> Compilation de la nomenclature effectuée"
echo -e "[Etape 8 / 9] >>> Seconde compilation du fichier $main.tex..."
echo -e "$orange"
pdflatex --output-dir=$output_dir $main >> render_report.txt
echo -e "$green"
echo -e "[Etape 8 / 9] >>> Seconde compilation du fichier $main.tex terminée"
echo -e "[Etape 9 / 9] >>> Déplacement du fichier $main.pdf..."
echo -e "$orange"
mv $output_dir/$main.pdf $main.pdf >> render_report.txt
echo -e "$green"
echo -e "[Etape 9 / 9] >>> Déplacement du fichier $main.pdf à la racine du projet..."
echo -e "$orange"
echo -e ">>> Affichage des avertissements"
echo "`cat render_report.txt | grep "Package Utils"`"
echo -e "$default"
echo -e ">>> Compilation terminée ! $default"

