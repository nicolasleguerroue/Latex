%############################################################
%###### Package 'Electronic' 
%###### This package contains some tools to generate electornic circuits
%###### Author  : Nicolas LE GUERROUE
%###### Contact : nicolasleguerroue@gmail.com
%############################################################

\RequirePackage{tikz-timing}

\RequirePackage{graphics} %include figures
\RequirePackage{graphicx} %include figures
\RequirePackage{pgf,tikz}
\RequirePackage{circuitikz}
\usetikzlibrary{babel}  %allow to use tikz library with babel

\RequirePackage{ifthen}    %use if then 
 

%############################ Settings ##############################
\tikzset{%
    timing/table/axis/.style={->,>=latex},
    timing/table/axis ticks/.style={},   
}

%Direction of some device such as resistor, led...
%1.5 is the minimum length of device according my runs
\newcommand{\Up}{0,1.5}
\newcommand{\Down}{0,-1.5}
\newcommand{\Right}{1.5,0}
\newcommand{\Left}{-1.5,0}


%###### Length of components
\newcommand{\bipolesLength}[1]{#1cm}     %begin default size
%Length update
\newcommand{\setBipolesLength}[1]{
    \renewcommand{\bipolesLength}{#1}
    \ctikzset{bipoles/length=\bipolesLength cm}
}%End \setBipolesLength

%############ Mirrors and inverting
\newcommand{\Mirror}{}
\newcommand{\Invert}{}

%Update
\newcommand{\setMirror}[1]{
    \renewcommand{\Mirror}{,mirror}
}%End \setMirror

\newcommand{\setNoMirror}[1]{
    \renewcommand{\Mirror}{}
}%End \setMirror

\newcommand{\setInvert}[1]{
    \renewcommand{\Invert}{,Invert}
}%End \setInvert

\newcommand{\setNoInvert}[1]{
    \renewcommand{\Invert}{}
}%End \setInvert


%############## Rotate ###########
\newcommand{\rotate}{0}

%Update
\newcommand{\setRotate}[1]{
    \renewcommand{\rotate}{#1}
}%End \setRotate


%####################### Colors
%default colors of border colors and background colors
\newcommand{\deviceBorderColor}{black}
\newcommand{\deviceBackgroundColor}{white}

%Update
\newcommand{\setDeviceBorderColor}[1]{
    \renewcommand{\deviceBorderColor}{#1}
    \renewcommand{\deviceBackgroundColor}{white} %reset bg color
}%End \setDeviceBorderColor

\newcommand{\setDeviceBackgroundColor}[1]{
    \renewcommand{\deviceBorderColor}{black} %reset bg color
    \renewcommand{\deviceBackgroundColor}{#1}
}%\setDeviceBackgroundColor

%Reset
\newcommand{\resetColors}{
    \renewcommand{\deviceBorderColor}{black} %reset border color
    \renewcommand{\deviceBackgroundColor}{white} %reset bg color
}
%####################################################################
%############## draw device #########################################

%rotation
%color
%anchor

%\ifthenelse{\equal{#1}{0}}{A.}{no A.}
%Init

\begin{comment}
    @begin
    @command \addLogicGate
    @des 
    Cette commande permet de dessiner une porte logique à double entrée. Pour dessinder une porte inverseuse, utiliser la commande \addNotGate
    @sed
    @input Coordonnées de la porte en (x,y) sans parenthèse
    @input Référence de la porte pour s'accrocher aux entrées et sorties
    @input Type de la porte [nand, nor, or, and, or, xor]
    @input Label de sortie (laisser vide si absence de label souhaité)
    @input Label de l'entrée 1 (laisser vide si absence de label souhaité)
    @input Label de l'entrée 2 (laisser vide si absence de label souhaité)
    @input Nom de la porte [NOR1, AND1...]
    @begin_example 
    \addLogicGate{5,5}{logicgate}{nand}{S}{A}{B}{L1}
    @end_example
    @end
    \end{comment}

\newcommand{\addLogicGate}[7] {
    %\Colors
    \ifthenelse{\equal{\deviceBorderColor}  {black}}
    {\draw (#1)         node (#2) [rotate=\rotate,xshift=0cm,fill=\deviceBackgroundColor,#3 port] {#7}}%if equal to black
    {\draw (#1)         node (#2) [rotate=\rotate,xshift=0cm,color=\deviceBorderColor,#3 port] {#7}}

    (#2.out)  node      [anchor=south west, yshift=-0.3cm] {#4}
    (#2.in 1) node (A1)     [anchor=east,xshift=0cm,yshift=+0.3cm]       {#5}
    (#2.in 2) node (B1)     [anchor=east,xshift=0cm,yshift=+0.3cm]       {#6};
}


\newenvironment{schema}[1]
{
    \begin{center}
        \makeatletter
        \def\@captype{figure}
        \makeatother
        \newcommand{\TitleSchema}{#1}%use var to print title 

        
        %\shorthandoff{:;!?} %Compulsory if frenchb package is used (from babel)
            
        \begin{tikzpicture}
            %\setGraphic %command to display with frenchb babel
    }
    { 
        \end{tikzpicture}
   % \caption{\TitleSchema}
    \end{center}
}


\newenvironment{numeric}[1]
{
\begin{center}
    \makeatletter
    \def\@captype{figure}
    \makeatother
    \newcommand{\TitleNumeric}{#1}%use var to print title 
\begin{tikztimingtable}
}
{
\end{tikztimingtable}%
\caption{\TitleNumeric}
\end{center}
}


%cood
%name device
%type (npn, pnp)
%B
%C
%E
\newcommand{\addTransistor}[6] {

    \ifthenelse{\equal{\deviceBorderColor}  {black}}
    {\draw (#1)         node (#2) [xshift=0cm,fill=\deviceBackgroundColor,#3] {}}%if equal to black
    {\draw (#1)         node (#2) [xshift=0cm,color=\deviceBorderColor,#3] {}}

    (#2.B)  node      [anchor=south west, xshift=0cm, yshift=0cm] {#4} 
    (#2.C) node (A1)     [anchor=north,xshift=0.3cm,yshift=+0.1cm]       {#5}
    (#2.E) node (B1)     [anchor=south,xshift=0.3cm,yshift=0.1cm]       {#6};
}
%node 1
%node 2
%wire type
\newcommand{\addWire}[3] {
    \draw (#1) #3 (#2);
}%end addWire

\newcommand{\orthogonalWireA}{-|}
\newcommand{\orthogonalWireB}{|-}
\newcommand{\directWire}{--}

%coord
%label
%value
\newcommand{\addNode}[3] {
    \node (#2) at (#1) {#3};
}%end addWire


%posiition (x,y)
%color
%width in pt
\newcommand{\addPoint}[3] {
    \filldraw [#2] (#1) circle (#3pt);
}%end addWire

%posiition (x,y)
%name
%value
\newcommand{\addPower}[3] {
    \draw (#1) node (#2) [vcc] {#3};
}%end addPower

%posiition (x,y)
%name
%value
\newcommand{\addGround}[3] {
    \draw (#1) node (#2) [ground] {#3};
}%end addGround

%posiition depart(x,y)
%orientation de départ
%position arrivée
\newcommand{\addResistor}[4] {
    \draw (#1) to[R,l=$R$] +(#2) #4 (#3);
}%end addResistor

%posiition depart(x,y)
%orientation de départ
%position arrivée
%type de liaison
%nom de la led
\newcommand{\addLed}[5] {
    \ifthenelse{\equal{\deviceBorderColor}  {black}}
    {\draw (#1) to[leD,l_=#5,fill=\deviceBackgroundColor] +(#2) #4 (#3);}
    {\draw (#1) to[leD,l_=#5,color=\deviceBorderColor] +(#2) #4 (#3);}

    % {\draw (#1)         node (#2) [xshift=0cm,fill=\deviceBackgroundColor,#3] {}}%if equal to black
    % {\draw (#1)         node (#2) [xshift=0cm,color=\deviceBorderColor,#3] {}}

    %\draw (#1) to[leD,l_=#5] +(#2) #4 (#3);
}%end addResistor